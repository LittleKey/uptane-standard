<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane IEEE-ISTO Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Alliance Community" fullname="Uptane Alliance Community">
      <organization>Uptane Alliance (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2019" month="June" day="14"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementors can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementors wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementor who follows a POUF as well as the Uptane standard will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance Terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be  interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered “Uptane-compliant,” an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="terminology-1" title="Terminology">

<t><spanx style="emph">Bundle</spanx>: A set of images released by the repository that is meant to be installed by one or more target ECUs on a vehicle during the same update cycle.</t>

<t><spanx style="emph">Bus</spanx>: An internal communications network that interconnects components within a vehicle. A vehicle can have a number of buses that will vary in terms of power, speed and resources.</t>

<t><spanx style="emph">ECU Identifier</spanx>: An attribute used to identify a specific ECU (e.g., such as a unique serial number).</t>

<t><spanx style="emph">ECU Version Manifest</spanx>: Metadata which details the software version currently installed on the ECU.</t>

<t><spanx style="emph">Hardware Identifier</spanx>: An attribute used to identify a model of an ECU.</t>

<t><spanx style="emph">Image</spanx>: File containing software for an ECU to install. May contain a binary image to flash, installation instructions, and other necessary information for the ECU to properly apply the update. Each ECU typically holds only one image, although this may vary in some cases.</t>

<t><spanx style="emph">Primary/Secondary ECUs</spanx>: Terms used to describe the control units within a ground vehicle. A primary ECU downloads and verifies update images and metadata for itself and for secondary ECUs, and distributes images and metadata to secondaries. Thus, it requires extra storage space and a means to download images and metadata.  Secondary ECUs receive their update images and metadata from the primary, and only need to verify and install their own metadata and images.</t>

<t><spanx style="emph">POUF</spanx>: A document that contains the protocol, operations, usage, and formats (POUF) of a specific Uptane implementation. The POUF contains decisions about SHOULDs and MAYs in an implementation, as well as descriptions of data binding formats. POUFs MAY be used to create compatible Uptane implementations.</t>

<t><spanx style="emph">Repository</spanx>: A server containing metadata about images. May also contain the images themselves. Other data may be stored on the repository to be accessed by ECUs during the update process.</t>

<t><spanx style="emph">Suppliers</spanx>: Independent companies to which auto manufacturers may outsource the production of ECUs. Tier-1 suppliers directly serve the manufacturers. Tier-2 suppliers are those that perform outsourced work for Tier-1 suppliers.</t>

<t><spanx style="emph">Vehicle Version Manifest</spanx>: A compilation of all ECU version manifests on a vehicle. It serves as a master list of all images currently running on all ECUs in the vehicle.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane Role Terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegations</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.<vspace />
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root Role</spanx>: Signs metadata that distributes and revokes public keys used to verify the root, timestamp, snapshot, and targets role metadata.</t>
  <t><spanx style="emph">Snapshot Role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets Role</spanx>: Sings metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp Role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and Abbreviations">

<t><spanx style="emph">CAN Bus</spanx>: Controller Area Network bus standard</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-uptane-standards" title="Rationale for and Scope of Uptane Standards">

<t>This Standards document clarifies the essential components and best practices for the secure design, implementation and deployment of Uptane by OEMs and suppliers. These practices contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-standards" title="Why Uptane requires standards">

<t>A standards document that can guide the safe design, integration and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility, without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standards-coverage" title="Scope of Standards Coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles such as automated shuttles, recreational vehicles, and military ground vehicles, and Uptane could even be applied to domains such as IoT devices, medical devices, and UAVs. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or they are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform a public key cryptography operation as well as some supporting operations.</t>
  <t>There are state-of-the-art secure servers in place, such as the director and image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere wth the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use Cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines, or can choose to add the materials later at the OEM’s assembly lines. The OEM’s implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all primaries perform full verification;</t>
  <t>all secondaries that are updated via OTA perform full or partial verification; and</t>
  <t>all other ECUs that do not perform verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature and all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom targets metadata used by the director repository: (1) the algorithm used to apply a delta image, and (2) the targets metadata about the delta image. The OEM will also check whether the delta images match the targets metadata from the director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These resources could include weaknesses, in terms of CPU or RAM, that prevent performance of public key cryptography; a lack of sufficient storage to undo installation of bad software; or an ECU simply may reside on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel, due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of Scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design Requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate best practices to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat Model and Attack Strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals that an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g. via an OBD port or using a compromised ECU as a vector)</t>
    </list></t>
  <t>Compromise and control either a director repository or image repository server, and any keys stored on the repository, but not both the director and image repositories.</t>
  <t>Compromise either a primary ECU or a secondary ECU, but not both in the same vehicle</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read the unencrypted contents of an update sent from a repository to a vehicle.</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny installation of updates may attempt one or more of the following strategies, among others:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously-valid software revision that is older than the currently-installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU, until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed Design of Uptane">

<t>Uptane is a secure software update framework for automobiles. We do not specify implementation details. Instead, we describe the components necessary for a compliant implementation, and leave it up to individual implementors to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An image repository containing binary images to install, and signed metadata about those images</t>
      <t>A director repository connected to an inventory database that can sign metadata on demand for images in the image repository</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images</t>
  <t>A public key infrastructure supporting the required metadata production/signing roles on each repository:
  <list style="symbols">
      <t>Root - Certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata</t>
      <t>Timestamp - Indicates whether there are new metadata or images</t>
      <t>Snapshot - Indicates images released by the repository at a point in time, via signing metadata about targets metadata</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated secondary ECUs. The primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each secondary ECU capable of performing either full or partial verification of metadata</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles, in case of compromise.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>Responsibility for signing images or a subset of images MAY be delegated to more than one role and therefore it is possible for two different roles to be trusted for signing a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images in the terminating delegation. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and so each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follow a designated structure. The Uptane standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the Deployment Considerations document, the Uptane Alliance provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common Metadata Structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root Metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role</t>
</list></t>

<t>Additionally, it MAY contain a mapping of roles to a list of valid URLs from which the role metadata can be downloaded.  If this mapping of URLs is used, the implementer SHOULD implement this functionality following <xref target="TAP-5"/> to avoid adding unforeseen security risks.</t>

</section>
<section anchor="targets_meta" title="Targets Metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, file sizes, and MAY also include other useful information about images, such as the types of hardware a particular image is compatible with.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about Images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a targets role.  Each targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to the required metadata, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the Deployment Considerations document. However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the targets metadata from the director.</t>

<t>Custom metadata also MAY contain a field or section that is demarcated as custom metadata that MUST match whenever two pieces of metadata are checked against each other–most commonly, when targets metadata from the Director and Image repositories are checked against each other.</t>

<t>The following information SHOULD be provided for each image on both the Image repository and the Director repository, and SHOULD be included in the “MUST match” section, if it is implemented:</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU can not be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided for each image in the targets metadata from the Director repository:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about Delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MAY delegate signing authority to other entities–for example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain more than one delegation, and MUST keep the delegations in prioritized order.</t>

<t>A list of delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier, and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g. “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot Metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the each Targets metadata file on the repository</t>
</list></t>

<t>The Snapshot metadata MAY also list the root metadata filename and version number. This is not required, particularly for implementations of <xref target="TAP-5"/>, but MAY be included in all cases for backwards compatibility.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp Metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest snapshot metadata on the repository.</t>
  <t>One or more hashes of the snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata, to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST sign the targets metadata for the image paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository</t>
  <t>The name and URL of the Image repository</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one director and one image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories, and a client that always checks for metadata matches between the two repositories. In this case, there would be no place with an explicit mapping defined, because the mapping would be defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Deployment Considerations</spanx> document (<xref target="DEPLOY"/>) gives more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the file name in a metadata file or an ECU, and the file name on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e. FILENAME.EXT.</t>
  <t>If an image is specified in a targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is “snapshot.json”. The filename on the repository will be “61.snapshot.json”.</t>
  <t>There is an image with the filename “acme_firmware.bin” specified in the Targets metadata, with a SHA256 of “aaaa” and a SHA512-256 of “bbbb”. It will have two filenames on the repository: “aaaa.acme_firmware.bin” and “bbbb.acme_firmware.bin”.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image Repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director Repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images in the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make whatever additional checks they wish. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the primary that sent it.</t>
      <t>The signature of each secondary’s contribution to the manifest matches the ECU key of that secondary.</t>
    </list></t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope of this standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images, and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes targets (<xref target="targets_meta"/>), snapshot (<xref target="snapshot_meta"/>), and timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementor MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a primary or a secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU, to protect against the possibility of directing the ECU to install an incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify image metadata and image binaries before installing a new image, and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>Each ECU in a vehicle receiving over-the-air updates is either a primary or a secondary ECU. A primary ECU collects and delivers to the Director vehicle manifests (<xref target="vehicle_version_manifest"/>) containing information about which images have been installed on ECUs in the vehicle. It also verifies the time and downloads and verifies the latest metadata and images for itself and for its secondaries. A secondary ECU verifies the time and downloads and verifies the latest metadata and images for itself from its associated primary ECU. It also sends signed information about its installed images to its associated primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A primary ECU MUST perform full verification (<xref target="full_verification"/>). A secondary ECU SHOULD perform full verification if possible. If a secondary cannot perform full verification, it SHALL perform partial verification. See <xref target="DEPLOY">Uptane Deployment Considerations</xref> for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementor MAY use any external source of time that is demonstrably secure. The Uptane deployment considerations (<xref target="DEPLOY"/>) describe one way to implement an external time server to cryptographically attest time, as well as the security properties required. When “loading time” is referenced in procedures in this standard, it should be understood to mean loading into memory the current time (if the ECU has its own secure clock), or the most recent attested time.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. See <xref target="DEPLOY">Uptane Deployment Considerations</xref> for more information.
  <list style="symbols">
      <t>Partial verification ECUs MUST have the Root and Targets metadata from the Director repository.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (root, targets, snapshot, and timestamp) from both repositories, as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>).</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version manifests and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the primary does">

<t>A primary downloads, verifies, and distributes the latest time, metadata and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a primary do not prohibit implementing primary capabilities on an ECU which does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a primary.
If multiple such primaries are included within a vehicle, each secondary ECU SHALL have a single primary responsible for providing its updates.</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once it has the complete manifest built, it MAY send the manifest to the Director repository. However, it is not strictly required that the primary send the manifest until step three. If permitted by the implementation, a primary MAY send only a diff of the manifest, to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time, so that it is already stored on the primary when it wishes to check for updates. Alternatively, the primary MAY request a version report from each secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. sha256, sha512-224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g. the VIN)</t>
      <t>The primary ECU’s unique identifier (e.g. the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. sha256, sha512-224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g. the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e. the non-custom targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A cryptographic nonce</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The primary SHALL download and verify images for itself and for all of its associated secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the director’s targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="targets_meta"/>. The primary SHALL associate each image binary with each of its possible filenames.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to secondaries">

<t>Unless the secondary ECU has its own way of verifying the time, or does not have the capacity to verify a time message, the primary is CONDITIONALLY REQUIRED to send the time to each ECU. The secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to secondaries">

<t>The primary SHALL send its latest downloaded metadata to all of its associated secondaries. The metadata it sends to each secondary MUST include all of the metadata required for verification on that secondary. For full verification secondaries, this includes the metadata for all four roles from both repositories, plus any delegated targets metadata files the secondary will recurse through to find the proper delegation. For partial verification secondaries, this includes only the targets metadata file from the director repository.</t>

<t>The primary SHOULD determine the minimal set of metadata files to send to each secondary, by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to secondaries">

<t>The primary SHALL send the latest image to each of its associated secondaries that have storage to receive it.</t>

<t>For secondaries without storage, the primary SHOULD wait for a request from the secondary to stream the new image file to it. The secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on primary or secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>The ECU SHALL load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the fifth step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU does not have secondary storage, i.e. buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the primary. (If the ECU has secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata), and verify that its hashes match the Targets metadata.</t>
</list></t>

<t>When the primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the fifth step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECUs hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, and restricts the ECUs a delegation applies to.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the target metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the target metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that the hash of the image matches the hash in the metadata.</t>
</list></t>

<t>If the ECU has secondary storage, the checks SHOULD be performed on the image in secondary storage, before it is installed.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with secondary ECU failures for ECUs that do not have secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the (<xref target="create_version_report"/>) step.</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., vehicle is in a parked state when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the primary (or simply save it to disk, if the ECU is a primary). The primary SHOULD write the version reports it receives to disk and associate them with the secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A primary ECU MUST perform full verification of metadata. A secondary ECU SHOULD perform full verification of metadata. If a secondary cannot perform full verification it SHALL perform partial verification instead.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time, or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MAY be performed by either primary or secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to primary ECUs.</t>

<t>If <xref target="TAP-5"/> is supported and a primary has an external connection to the Uptane repositories, a primary ECU SHALL download metadata and images following the rules specified in that TAP.  If <xref target="TAP-5"/> is not supported or if the primary does not have an external connection to the Uptane repositories, the download SHOULD follow the <xref target="TUF-spec"/> and the metadata file renaming rules specified in <xref target="metadata_filename_rules"/>.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted, to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where to download metadata from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time, or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the target metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same file name listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the primary is responsible for validating encrypted images and associated metadata. The target ECU (primary or secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all “MUST match” custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous targets metadata file is less than or equal to the release counter in this targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (e.g. rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

<t>If the ECU performing the verification is the primary ECU, it SHOULD also ensure that the targets metadata from the director repository doesn’t contain any ECU identifiers for ECUs not actually present in the vehicle.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementor. For example, X may be tens of kilobytes. The filename used to download the root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by: (1) a threshold of keys specified in the latest Root metadata file (version N), and (2) a threshold of keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 0 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and / or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementor. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to the its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementor. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) Skip this step if checking Targets metadata on a partial-verification ECU; partial-verification ECUs will not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of keys specified in the relevant metadata file (Checks for an arbitrary software attack):
  <list style="numbers">
      <t>If checking top-level targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated targets metadata, the threshold of keys is specified in the targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level targets metadata, but it also may be delegated to another role–or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level targets metadata file.</t>

<t><list style="numbers">
  <t>Download the current metadata file, and check it following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name must match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed/aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata (or error) following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles which have agreeing (i.e. identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there remains more than one agreeing set of roles, each set having different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="http://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TAP-5" target="https://github.com/theupdateframework/taps/blob/01726d203c9b9c029d26f6612069ce3180500d9a/tap5.md#downloading-metadata-and-target-files">
  <front>
    <title>The Update Framework TAP 5 - Setting URLs for roles in the root metadata file</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="22"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/TODO">
  <front>
    <title>Uptane Deployment Guidelines</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.github.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAJfhA10AA+1923LU2Jbgu79CAQ/Ynsw0NpgC6mHGgDnlPoAZ21Sd6o4O
jjJTaavJlPJISpssgoj+kJmf6y+Zdd8XSWlDVfVMR8x5OIVT0r6sve63PRwO
t5q8mWfPkw/LJi2y5OT4+Hh4cn5xmpzD39O0miazskpeZXV+WSTwS3KyWM6z
RVY0aZOXxVY6HlfZNXz//uLo3fHWtJwU6QLGW9F4w1pGGU5phK1J2mSXZbV+
nuTFrNzaypfV86QoX2VVfg0DXmf1RbWqm4OHD589PNhKqyx9nlycvjrduimr
T5dVuVrK35+yNfw0fZ6cFE1WFVkzfFWls2Zri2b8mM7LAlaxzuqtZf48+Zem
nAySuqyaKpvV8K/1Av/xr1tb6aq5KqvnW0kyhCXVz5O32WKcVXVSzpLmKlO4
HM3neVpMsuRluVisirxZwxdJwnvd/E5ZXaZF/huBq/3u9mSvTN5X5WyU/BNs
PC+Sl+lyWdY79G22SPN5C5j1/7gsy8t5RvCoR5NyQS/XsLmseZ48gT00VXmR
Ta7o90m5KhoE+YfzI/qhyi5pLe9+5eew0ufJi6osP83XhXwyhX3t7x883N/a
KspqQWeDULqf/JUhn0yzWbL99sP5xSA5/+nozZtB8vbo10GSNZMRLv7s9cuD
/f1n/M3fRocPnyXv/3qS1Mtswk8fPXn8Az99lzV4vMmHIseJCeNgU8u0yotL
3Bb8p+aPDvefPeWP9OV3uLq5wDd5DX8lL+GFd69fPqetNGl1iVC5aprl8729
m5ub0Yo/HcHJ7FXZErCi3muq/cM9/oAJ4p5OYIRwVBTZ5+T+/uHzDZPX92gQ
h1b4P0WtUfIqvc7r9q8rwLiGfp4CgTxPAO5Ph/sPaaMXR++TR0nawLFdJ9OH
T/efZofwAH4ePmpvsYY9XubN1WqMeLEHKLxa4pizClAVobzXpMt6bzwvx3sy
2NOHk0cHB0/3D9PHPzw6PHg4O8ieTiaHs8Ns/HQ6e/zsGX7yaLSY+uC5INrA
kZPXOrQsdZi8Xc2bfFiV8wywBPCUwFP3A+Zi9NdR8tfVcrmq08U6fHY+So5u
btJp+OvxCKisgsHn4e8/AzDz9Lfwx38aJW/L+iorPpWtB0xtMegf7g/3nxr0
Hyv0DybjJz9Mnwn0H/8+6Mtg+4+yyf6zxwePp/vZo8PH40dPZ0+fHDx9+mQ2
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
lx/UXeEB2hQOSSEFOyjnErrls1ZQwS/B89V2ppa6w7WlGM5vfP3q6wRennrX
YM7OZ6iEhKmKt2yGHX9Ge+3xiOqCtZAjvOPF/09k/88TmYOmA813oTN+6JI7
uR0Emziulp1qEvqSCfiudBq+KIuh9JXrKT/N61YP0p3OpiMUp8wavorQXGrc
AcLWHVgBQkNYTCy2hS+maOoIzW+AWC3dTQ44bNNeoG6uCWq3WE14T27LaOpS
8RhpYo+cXHwdOFJHXVPHRteX+902V9fUrdxHa3ys54UzqFmadji2S9I02lyu
w2++afW5tivts/o2rr49UEfkRTr29tyMx9Wk/LFF/cTEn0a52oJHPu17idJ+
3g690ipQ0VTiB3UfWWgTt5GWQkoDLroUFgi2o5gosTJncpmokk5p1144ct11
CUx0m1jSBrVBzG99JhePkqmohfLUyNruwtLF6dHfZqt/ud821a1qUZzpngnn
e6o7o6XmzzNj1xyfaBtPpIuX8gde0wLvkr3MQp24vz+fXjbuWEtpIW4GpVs0
VRR5VzO05iso/sqZtx6X5RfNJpeMUN/nfn+zM0MA2/JldJEV7QYnl4NyDb6D
4e9ATzi2KxhrNLumjO2HoJmD11nbS0Ty+pzH/CfKiCMPZJtReQsbaBab5hj5
U7U7v/c6oJfzVS2Cqe/KJSmqbdpYUCFjp2zoqlxdXllLaEY6jBQFPbRwU523
Y27Yl+WedNdbtvrJtpPKHWKQjWupegwyTOHEKF3k2JctK1nEpz2gMgfn9/F6
enkJYW0m1S1RjkNMEgxuSunKKSisERo82G6kUjYSBTYdZXW7+oSu7iCsjEfI
kpiFNmXAObsJKZGGONeZZfCTi4GYAOXzUQjN/0Krd+0m+KZ9mjdpLlnFZu0b
SjiIUpZZlaX8u2WtMApR4L+Tydl2dejSczuZXA0oz29+jA1p+Zr5JltqRaAL
+rv0ey8bJbzk1myZja51dKqzvwQDPQsuxvDTi9yO2ff+MzNvOcQg+Ml5K/iY
BBj6ew/sA98nLi/56VuPPG94gCAtRzi+/diGtZdkTHvlcKTwcu/IptxLT0bJ
S7qYzPdcBioxuv7pjY+x2bojxPEmUsA8FA+hQ9amAYdJxJ1PrMfF+nBn7JmV
Y4u/RwIxhrwtwAAfL6K9hS7Zt92bnrIj9W53uNV4pD0AbNiAq8/oPgEizgId
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
IYcRhj5/CLv/P8FM+Uv1JwEA

-->

</rfc>

